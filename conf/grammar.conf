File: CommentMultiLine(s?) Package Definition(s?) {
	$return = { package => $item{Package}, definitions =>  [@{$item[1] || {}}, @{$item[3]}]};
}
Package: 'package' /[^;]+ / ';' {
	$return = $item[2];
}
Definition: Enum | Object | Import |  CommentMultiLine
Object: 'object' Name '{' <skip:'\h*'> Commentline(?) <skip:'\s*'> ObjectLine(s?) /};?/ /;?/ {
	$return = { type => "object", name => $item[2], comment => $item[5], content => $item[7] };
}
Import: 'import' Value /;?/ {
	$return = { import => $item[2] };
}
Enum: 'enum' Name '{' <skip:'\h*'> Commentline(?) <skip:'\s*'> EnumLine(s?) /};?/ /;?/ {
	$return = { type => "enum", name => $item[2], comment => $item[5], content => $item[7] };
}
EnumLine: EnumValue | CommentMultiLine 
EnumValue: Name '=' Value Option(?) ';' <skip:'\h*'> Commentline(?) {
	$return = { type => "value", name => $item{Name}, value => $item{Value}, comment => (exists $item[7][0] ? $item[7][0] : "") };
}
ObjectLine: OptionLine | RequiredLine | RepeatedLine | OptionalLine | CommentMultiLine
OptionLine: 'option' Name '=' Value ';' <skip:'\h*'> Commentline(?) {
	$return = { type => 'option', name => $item{Name}, value => $item{Value}, data_type => "uint16", comment => (exists $item[7][0] ? $item[7][0] : "") };
}
RequiredLine: 'required' Type Name '=' Value Option(?) ';' <skip:'\h*'> Commentline(?) {
	$return = { type => 'required', data_type => $item{Type}, name => $item{Name}, value => $item{Value}, options =>(ref($item[6][0]) ? $item[6][0] : {}), comment => (exists $item[9][0] ? $item[9][0] : "") };
}
RepeatedLine: 'repeated' Type Name '=' Value Option(?) ';' <skip:'\h*'> Commentline(?) {
	$return = { type => 'required', data_type => $item{Type}, name => $item{Name}, value => $item{Value}, options => (ref($item[6][0]) ? $item[6][0] : {}), repeated => 1, comment => (exists $item[9][0] ? $item[9][0] : "") };
}
OptionalLine: 'optional' Type Name '=' Value Option(?) ';' <skip:'\h*'> Commentline(?)  {
	$return = { type => 'required', data_type => $item{Type}, name => $item{Name}, value => $item{Value}, options => (ref($item[6][0]) ? $item[6][0] : {}), optional => 1, comment => $item[9] }
}
Option: '[' Name '=' OptionValue ']' {
	$return = { $item{Name} => $item{OptionValue} }
}
Name: /\w+/
Value: /\"?([\w.]*)\"?/ {
	$return =  $1;
}
OptionValue: /(\"?[^]]*\"?)/ {
	$return =  $1;
}
Type: /\w+/
CommentMultiLine: Commentline(s?) {
	$return = $item[1];
	$return =  scalar @{$item[1]} > 0 ? { type => "comment", comment => $item[1]} : undef;
}
Comment: Commentline(s) {
	$return = (defined $item[1] ?  join("\n", @{$item[1]}) : undef );
}
Commentline: /\/\/\h*(.*)\n/ {
	$return = $1;
}
